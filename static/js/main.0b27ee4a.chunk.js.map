{"version":3,"sources":["assets/images/flappybaraCode.png","assets/images/gochellaCode.png","assets/images/discourseCode.png","assets/images/shadowfightCode.png","projects/project_item.jsx","projects/projects.jsx","main/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProjectItem","_ref","name","description","background","react_default","a","createElement","className","src","alt","concat","Projects","flappybaraDescription","shadowFightDescription","discourseDescription","gochellaDescription","project_item","flappybaraCode","gochellaCode","discourseCode","shadowfightCode","App","projects_projects","Boolean","window","location","hostname","match","document","addEventListener","ReactDOM","render","main_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mOCYzBC,qBAVK,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,YAAaC,EAAtBH,EAAsBG,WAAtB,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BC,IAAKL,EAAYM,IAAG,GAAAC,OAAKT,EAAL,WAC7DG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAKL,GACJC,8ECwDQS,EAvDE,WACf,IAAMC,EACJR,EAAAC,EAAAC,cAAA,oJAMIO,EACJT,EAAAC,EAAAC,cAAA,kKAMIQ,EACJV,EAAAC,EAAAC,cAAA,mJAMIS,EACJX,EAAAC,EAAAC,cAAA,iKAMF,OACEF,EAAAC,EAAAC,cAAA,WAASC,UAAU,sBACjBH,EAAAC,EAAAC,cAACU,EAAD,CACEf,KAAK,aACLC,YAAaU,EACbT,WAAYc,MAEdb,EAAAC,EAAAC,cAACU,EAAD,CACEf,KAAK,YACLC,YAAaa,EACbZ,WAAYe,MAEdd,EAAAC,EAAAC,cAACU,EAAD,CACEf,KAAK,YACLC,YAAaY,EACbX,WAAYgB,MAEdf,EAAAC,EAAAC,cAACU,EAAD,CACEf,KAAK,eACLC,YAAaW,EACbV,WAAYiB,QC5CLC,MATf,WACE,OACEjB,EAAAC,EAAAC,cAAA,WAASC,UAAU,0BACjBH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAACgB,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,SAASC,iBAAiB,mBAAoB,WAC5CC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASJ,SAASK,eAAe,WDyH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0b27ee4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flappybaraCode.e5232c76.png\";","module.exports = __webpack_public_path__ + \"static/media/gochellaCode.24053ebf.png\";","module.exports = __webpack_public_path__ + \"static/media/discourseCode.d248f33c.png\";","module.exports = __webpack_public_path__ + \"static/media/shadowfightCode.18b7c5e4.png\";","import React from 'react';\r\n\r\nconst ProjectItem = ({ name, description, background }) => (\r\n  <div className=\"project-item-container\">\r\n    <img className=\"project-item-background\" src={background} alt={`${name} code`}/>\r\n    <div className=\"project-item\">\r\n      <h4>{name}</h4>\r\n      {description}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ProjectItem;","import React from 'react';\r\nimport ProjectItem from './project_item';\r\nimport '../assets/css/projects.css';\r\nimport flappybaraCode from '../assets/images/flappybaraCode.png';\r\nimport gochellaCode from '../assets/images/gochellaCode.png';\r\nimport discourseCode from '../assets/images/discourseCode.png';\r\nimport shadowfightCode from '../assets/images/shadowfightCode.png';\r\n\r\nconst Projects = () => {\r\n  const flappybaraDescription = \r\n    <p>\r\n      Inspired by the popular Flappy Bird game, Flappybara \r\n      follows the flying adventures of a capybara. Built using \r\n      Unity and C# (with Mono).\r\n    </p>;\r\n  \r\n  const shadowFightDescription = \r\n    <p>\r\n      A fighting game where you can punch your opponent to death \r\n      with a backdrop of falling sakura petals or snow. Built using \r\n      JavaScript and HTML5 Canvas.\r\n    </p>;\r\n\r\n  const discourseDescription =\r\n    <p>\r\n      An application that provides a platform for live text chat in \r\n      private servers and channels. Built using React/Redux and \r\n      Ruby on Rails.\r\n    </p>\r\n\r\n  const gochellaDescription = \r\n    <p>\r\n      An event planning web app to help organizers plan which acts \r\n      their group will be attending throughout an event. Built \r\n      using MongoDB and React/Redux.\r\n    </p>\r\n\r\n  return (\r\n    <section className=\"projects-container\">\r\n      <ProjectItem \r\n        name=\"Flappybara\" \r\n        description={flappybaraDescription}\r\n        background={flappybaraCode}\r\n      />\r\n      <ProjectItem\r\n        name=\"Go-Chella\"\r\n        description={gochellaDescription}\r\n        background={gochellaCode}\r\n      />\r\n      <ProjectItem\r\n        name=\"Discourse\"\r\n        description={discourseDescription}\r\n        background={discourseCode}\r\n      />\r\n      <ProjectItem\r\n        name=\"Shadow Fight\"\r\n        description={shadowFightDescription}\r\n        background={shadowfightCode}\r\n      />\r\n    </section>\r\n  )\r\n};\r\n\r\nexport default Projects;","import React from 'react';\r\nimport '../assets/css/main.css';\r\nimport Projects from '../projects/projects';\r\n\r\nfunction App() {\r\n  return (\r\n    <section className=\"main-content-container\">\r\n      <h1>HAI DIS IS MAIN CONTENT</h1>\r\n      <Projects />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/css/index.css';\r\nimport './assets/css/reset.css';\r\nimport App from './main/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  ReactDOM.render(<App />, document.getElementById('root'));\r\n})\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}